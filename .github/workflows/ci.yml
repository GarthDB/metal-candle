name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: macos-14  # Apple Silicon runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --all-features --workspace
      
      - name: Run doc tests
        run: cargo test --doc --all-features --workspace

  clippy:
    name: Clippy (Zero Warnings)
    runs-on: macos-14  # Apple Silicon runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Clippy (pedantic, zero warnings)
        run: cargo clippy --all-features --workspace -- -D warnings

  fmt:
    name: Format Check
    runs-on: ubuntu-latest  # Format check doesn't need Apple Silicon
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  coverage:
    name: Code Coverage
    runs-on: macos-14  # Apple Silicon runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Generate coverage
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
          cargo llvm-cov --all-features --workspace --json --output-path coverage.json
      
      - name: Check coverage threshold (≥80%)
        run: |
          # Extract coverage from JSON output (most reliable format)
          if command -v jq &> /dev/null; then
            COVERAGE=$(jq -r '.data[0].totals.lines.percent' coverage.json)
          else
            # Fallback: parse the summary output
            COVERAGE=$(cargo llvm-cov --all-features --workspace --summary-only | grep 'TOTAL' | awk '{for(i=1;i<=NF;i++) if($i ~ /%$/) {gsub(/%/,"",$i); print $i; exit}}')
          fi
          
          echo "Coverage: ${COVERAGE}%"
          
          # Check if we got a valid number
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "null" ]; then
            echo "Warning: Could not determine coverage percentage"
            exit 1
          fi
          
          # Use awk for floating point comparison
          if awk "BEGIN {exit !($COVERAGE < 80)}"; then
            echo "❌ Coverage ${COVERAGE}% is below threshold of 80%"
            exit 1
          fi
          
          echo "✅ Coverage ${COVERAGE}% meets threshold"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Check
    runs-on: macos-14  # Apple Silicon runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build (debug)
        run: cargo build --all-features --workspace
      
      - name: Build (release)
        run: cargo build --all-features --workspace --release
      
      - name: Build docs
        run: cargo doc --all-features --workspace --no-deps

  minimal-versions:
    name: Minimal Versions Check
    runs-on: macos-14  # Apple Silicon runner
    continue-on-error: true  # Optional check, don't fail CI
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-minimal-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check with minimal versions
        run: |
          cargo +nightly update -Z minimal-versions
          cargo check --all-features --workspace

